<!-- Individual recipe view page template -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= recipe.recipe_idea %> - Recipe Content Generator</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/midjourney-grid-viewer.css"> <!-- Added CSS for midjourney grid -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    .nav-tabs .nav-link {
      color: #555;
    }
    .nav-tabs .nav-link.active {
      font-weight: bold;
      color: #0d6efd;
    }
    .tab-content {
      padding: 20px;
      border: 1px solid #dee2e6;
      border-top: none;
      border-radius: 0 0 0.25rem 0.25rem;
    }
    .pinterest-variation {
      border: 1px solid #dee2e6;
      border-radius: 0.25rem;
      margin-bottom: 15px;
      padding: 15px;
    }
    .pinterest-variation.active {
      border-color: #0d6efd;
      background-color: rgba(13, 110, 253, 0.05);
    }
    .copy-btn {
      cursor: pointer;
    }
    pre {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 0.25rem;
      white-space: pre-wrap;
    }
    .author-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      margin-right: 10px;
    }
    .author-info {
      display: flex;
      align-items: center;
    }
    .admin-content {
      border-left: 3px solid #1cc88a;
      padding-left: 15px;
    }
    .employee-content {
      border-left: 3px solid #4e73df;
      padding-left: 15px;
    }
    .recipe-title {
      font-size: 1.8rem;
      margin-bottom: 1rem;
    }
    .recipe-meta {
      margin-top: 15px;
    }
    .recipe-header {
      padding: 10px;
      border-radius: 4px;
    }
  </style>
</head>
<body>

  <div class="container mt-5">
    <div class="row">
      <div class="col-lg-12">
       
        
        <div class="card mb-4">
          <div class="card-header">
            <!-- Recipe header area in recipe-view.ejs -->
            <div class="recipe-header <%= recipe.owner_role === 'admin' ? 'admin-content' : 'employee-content' %>">
              <h1 class="recipe-title"><%= recipe.recipe_idea %></h1>
              
              <div class="recipe-meta">
                <div class="row">
                  <div class="col-md-6">
                    <div class="author-info">
                      <div class="author-avatar" style="background-color: <%= recipe.owner_role === 'admin' ? '#1cc88a' : '#4e73df' %>;">
                        <%= recipe.owner_name ? recipe.owner_name.charAt(0).toUpperCase() : 'U' %>
                      </div>
                      <div>
                        <strong>Created by:</strong> 
                        <%= recipe.owner_name || 'Unknown' %>
                        <span class="badge <%= recipe.owner_role === 'admin' ? 'bg-success' : 'bg-primary' %>">
                          <%= recipe.owner_role || 'user' %>
                        </span>
                        <br>
                        <small>Created: <%= moment(recipe.created_at).format('MMMM D, YYYY') %></small>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6 text-end">
                    <% if (recipe.category) { %>
                      <span class="badge bg-secondary"><%= recipe.category %></span>
                    <% } %>
                    
                    <% if (recipe.interests) { %>
                      <div class="mt-2">
                        <small class="text-muted">Interests: <%= recipe.interests %></small>
                      </div>
                    <% } %>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-8">
                <p><strong>Language:</strong> <%= recipe.language %></p>
              </div>
              <div class="col-md-4 text-md-end">
                <button type="button" class="btn btn-warning me-2" 
                        id="bufferPublishBtn"
                        data-recipe-id="<%= recipe.id %>"
                        data-bs-toggle="modal" 
                        data-bs-target="#bufferPublishModal">
                  <i class="bi bi-send"></i> Publish to Buffer
                </button>
                <a href="/keywords" class="btn btn-success">
                  <i class="fa fa-plus"></i> Generate New recipe
                </a>
                <a href="/recipes" class="btn btn-outline-primary">
                  <i class="fa fa-arrow-left"></i> Back to List
                </a>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Pinterest Style Selector -->
        <div class="card mb-4">
          <div class="card-header">
            <h5 class="mb-0">
              <i class="fab fa-pinterest me-2"></i>Pinterest Style Preference
            </h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-8">
                <label for="globalDesignVariation" class="form-label">Choose Your Default Pinterest Style</label>
                <select id="globalDesignVariation" class="form-select">
                  <!-- üé≤ RANDOM SELECTION -->
                  <option value="random">üé≤ Random Style (Surprise Me!)</option>
                  <!-- ‚≠ê RECOMMENDED STYLES -->
                  <option value="2">Style 2 - Geometric Border (Dotted Frame) ‚≠ê Recommended</option>
                  <option value="3">Style 3 - Modern Badge (Corner Label) ‚≠ê Recommended</option>
                  <option value="4">Style 4 - Clean Ribbon (Accent Strips) ‚≠ê Recommended</option>
                  <option value="5">Style 5 - Decorative Frame (Corner Accents) ‚≠ê Recommended</option>
                  <option value="14">Style 14 - Rustic Wood Grain - "HOMEMADE" ‚≠ê Recommended</option>
                  <option value="15">Style 15 - Vintage Recipe Card - "TRADITIONAL" ‚≠ê Recommended</option>
                  <option value="16">Style 16 - Modern Minimalist Chef - "CHEF QUALITY" ‚≠ê Recommended</option>
                  <option value="18">Style 18 - Cozy Kitchen Warmth - "HOME COOKED" ‚≠ê Recommended</option>
                  <option value="20">Style 20 - Bakery Flour Dust - "FRESH BAKED" ‚≠ê Recommended</option>
                  <!-- ‚ú® ALL AVAILABLE STYLES -->
                  <option disabled>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</option>
                  <option value="1">Style 1 - Simple Layout (Reduced Stroke)</option>
                  <option value="6">Style 6 - Elegant Overlay (Double Border)</option>
                  <option value="7">Style 7 - Decorative Border Pattern</option>
                  <option value="8">Style 8 - Electric Lightning Strike</option>
                  <option value="9">Style 9 - Crystal Gem Faceted</option>
                  <option value="10">Style 10 - Chef Special</option>
                  <option value="11">Style 11 - Garden Fresh</option>
                  <option value="12">Style 12 - Gourmet Gold</option>
                  <option value="13">Style 13 - Country Kitchen</option>
                  <option value="17">Style 17 - Seasonal Harvest</option>
                  <option value="19">Style 19 - Farm Fresh</option>
                  <option value="21">Style 21 - Circle Dots Pattern ‚óè‚óè‚óè‚óè‚óè‚óè‚óè</option>
                  <option value="22">Style 22 - Diamond Sparkles ‚ú®‚óÜ‚ú®‚óÜ‚ú®</option>
                </select>
                <div class="form-text">
                  <i class="bi bi-info-circle"></i> 
                  <strong>This is your global Pinterest style preference.</strong> 
                  It will be used for all Pinterest image generation across all recipes. 
                  <span class="text-success">Your selection is automatically saved and remembered.</span>
                </div>
              </div>
              <div class="col-md-4">
                <div class="alert alert-info" style="background-color: var(--dark-card); border-color: var(--border-color); color: var(--text-light);">
                  <h6><i class="fab fa-pinterest text-danger"></i> How it works:</h6>
                  <ul class="small mb-0">
                    <li>Choose your favorite style once</li>
                    <li>All Pinterest images will use this style</li>
                    <li>Works across all recipes and sessions</li>
                    <li>Change anytime to update your preference</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Content tabs -->
        <ul class="nav nav-tabs" id="contentTabs" role="tablist">
          <% if (facebook) { %>
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="facebook-tab" data-bs-toggle="tab" data-bs-target="#facebook" type="button" role="tab" aria-controls="facebook" aria-selected="true">
                <i class="fab fa-facebook"></i> Facebook
              </button>
            </li>
          <% } %>
          
          <% if (pinterestVariations && pinterestVariations.length > 0) { %>
            <li class="nav-item" role="presentation">
              <button class="nav-link <%= !facebook ? 'active' : '' %>" id="pinterest-tab" data-bs-toggle="tab" data-bs-target="#pinterest" type="button" role="tab" aria-controls="pinterest" aria-selected="<%= !facebook %>">
                <i class="fab fa-pinterest"></i> Pinterest (<%= pinterestVariations.length %>)
              </button>
            </li>
          <% } %>
          
          <% if (blog) { %>
            <li class="nav-item" role="presentation">
              <button class="nav-link <%= !facebook && (!pinterestVariations || pinterestVariations.length === 0) ? 'active' : '' %>" id="blog-tab" data-bs-toggle="tab" data-bs-target="#blog" type="button" role="tab" aria-controls="blog" aria-selected="<%= !facebook && (!pinterestVariations || pinterestVariations.length === 0) %>">
                <i class="fa fa-blog"></i> Blog Post
              </button>
            </li>
          <% } %>
        </ul>
        
        <div class="tab-content" id="contentTabsContent">
          <!-- Facebook Content Tab -->
          <% if (facebook) { %>
            <div class="tab-pane fade show active" id="facebook" role="tabpanel" aria-labelledby="facebook-tab">
              <div class="row">
                <div class="col-md-8">
                  <h3>Facebook Recipe Post</h3>
                  <div class="card mb-4">
                    <div class="card-header bg-facebook text-white d-flex justify-content-between align-items-center">
                      <h4 class="mb-0">Recipe</h4>
                      <button class="btn btn-sm btn-light copy-btn" data-content="recipe-content">
                        <i class="fa fa-copy"></i> Copy
                      </button>
                    </div>
                    <div class="card-body">
                      <pre id="recipe-content"><%= facebook.recipe_text %></pre>
                    </div>
                  </div>
                  
                  <div class="card mb-4">
                    <div class="card-header bg-facebook text-white d-flex justify-content-between align-items-center">
                      <h4 class="mb-0">Facebook Caption</h4>
                      <button class="btn btn-sm btn-light copy-btn" data-content="fbcaption-content">
                        <i class="fa fa-copy"></i> Copy
                      </button>
                    </div>
                    <div class="card-body">
                      <pre id="fbcaption-content"><%= facebook.fb_caption %></pre>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-4">
                  <h3>Midjourney Prompt</h3>
                  <div class="card">
                    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                      <h4 class="mb-0">Prompt</h4>
                      <button class="btn btn-sm btn-light copy-btn" data-content="mjprompt-content">
                        <i class="fa fa-copy"></i> Copy
                      </button>
                    </div>
                    <div class="card-body">
                      <pre id="mjprompt-content"><%= facebook.mj_prompt %></pre>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Midjourney Grid Viewer Card -->
              <div class="card mb-4">
                <div class="card-header">
                  <h5>Midjourney Images</h5>
                </div>
                <div class="card-body">
                  <p class="text-muted">Click on any of the four images to select and save it to the recipe.</p>
                  <div id="midjourney-grid-container"></div>
                  
                  <div id="processedImageFeedback" class="alert alert-success mt-3" style="display: none;">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    <span id="processedImageMessage">Image processed successfully!</span>
                  </div>
                </div>
              </div>
            </div>
          <% } %>
          
          <!-- Pinterest Content Tab -->
          <% if (pinterestVariations && pinterestVariations.length > 0) { %>
            <div class="tab-pane fade <%= !facebook ? 'show active' : '' %>" id="pinterest" role="tabpanel" aria-labelledby="pinterest-tab">
              <div class="row">
                <div class="col-md-12 mb-4">
                  <h3>Pinterest Variations</h3>
                  <p>Below are <%= pinterestVariations.length %> variations of Pinterest content for this recipe.</p>
                  
                  <div class="accordion" id="pinterestAccordion">
                    <% pinterestVariations.forEach((variation, index) => { %>
                      <div class="accordion-item">
                        <h2 class="accordion-header" id="heading<%= index %>">
                          <button class="accordion-button <%= index > 0 ? 'collapsed' : '' %>" type="button" data-bs-toggle="collapse" data-bs-target="#collapse<%= index %>" aria-expanded="<%= index === 0 %>" aria-controls="collapse<%= index %>">
                            Variation <%= index + 1 %>: <%= variation.pin_title %>
                          </button>
                        </h2>
                        <div id="collapse<%= index %>" class="accordion-collapse collapse <%= index === 0 ? 'show' : '' %>" aria-labelledby="heading<%= index %>" data-bs-parent="#pinterestAccordion">
                          <div class="accordion-body">
                            <div class="row">
                              <div class="col-md-8">
                                <h5>Pin Title</h5>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                  <p class="mb-0 fw-bold"><%= variation.pin_title %></p>
                                  <button class="btn btn-sm btn-outline-primary copy-btn" data-content="pintitle<%= index %>">
                                    <i class="fa fa-copy"></i>
                                  </button>
                                </div>
                                
                                <h5 class="mt-3">Pin Description</h5>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                  <p class="mb-0"><%= variation.pin_description %></p>
                                  <button class="btn btn-sm btn-outline-primary copy-btn" data-content="pindesc<%= index %>">
                                    <i class="fa fa-copy"></i>
                                  </button>
                                </div>
                                
                                <h5 class="mt-3">Overlay Text</h5>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                  <p class="mb-0 fst-italic"><%= variation.overlay_text %></p>
                                  <button class="btn btn-sm btn-outline-primary copy-btn" data-content="overlay<%= index %>">
                                    <i class="fa fa-copy"></i>
                                  </button>
                                </div>
                              </div>
                              
                              <div class="col-md-4">
                                <h5>Blog SEO</h5>
                                <p><strong>Meta Title:</strong> <br><%= variation.meta_title %></p>
                                <p><strong>Meta Description:</strong> <br><%= variation.meta_description %></p>
                                <p><strong>URL Slug:</strong> <br><%= variation.meta_slug %></p>
                                
                                <% if (blog) { %>
                                  <form action="/api/generate/blog-from-variation" method="POST" id="generateBlogForm<%= index %>">
                                    <input type="hidden" name="recipeId" value="<%= recipe.id %>">
                                    <input type="hidden" name="variationId" value="<%= variation.id %>">
                                    <button type="submit" class="btn btn-success w-100 mt-3 generate-blog-btn" data-index="<%= index %>">
                                      <i class="fa fa-magic"></i> Generate Blog Post with this Variation
                                    </button>
                                  </form>
                                <% } else { %>
                                  <form action="/api/generate/blog-from-variation" method="POST" id="generateBlogForm<%= index %>">
                                    <input type="hidden" name="recipeId" value="<%= recipe.id %>">
                                    <input type="hidden" name="variationId" value="<%= variation.id %>">
                                    <button type="submit" class="btn btn-success w-100 mt-3 generate-blog-btn" data-index="<%= index %>">
                                      <i class="fa fa-magic"></i> Generate Blog Post with this Variation
                                    </button>
                                  </form>
                                <% } %>
                              </div>
                            </div>
                            
                            <!-- Hidden elements to support copy functionality -->
                            <span id="pintitle<%= index %>" class="d-none"><%= variation.pin_title %></span>
                            <span id="pindesc<%= index %>" class="d-none"><%= variation.pin_description %></span>
                            <span id="overlay<%= index %>" class="d-none"><%= variation.overlay_text %></span>
                          </div>
                        </div>
                      </div>
                    <% }); %>
                  </div>
                  
                  <!-- Pinterest Image Generation Section -->
                  <div class="mt-5">
                    <div class="card">
                      <div class="card-header bg-pinterest text-white">
                        <h4 class="mb-0">
                          <i class="fab fa-pinterest"></i> Pinterest Image Generator
                        </h4>
                      </div>
                      <div class="card-body">
                        <p class="text-muted">Generate a professional 561x1120 Pinterest image using your recipe images and overlay text.</p>
                        
                        <!-- Pinterest Images Display -->
                        <div id="pinterestImagesContainer" class="mb-4">
                          <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Generated Pinterest Images</h5>
                            <button id="refreshPinterestImages" class="btn btn-sm btn-outline-secondary">
                              <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                          </div>
                          <div id="pinterestImagesList" class="row">
                            <!-- Pinterest images will be loaded here -->
                          </div>
                        </div>
                        
                        <!-- Generation Controls -->
                        <div class="row">
                          <div class="col-md-8">
                            <div class="alert alert-info">
                              <i class="bi bi-info-circle"></i>
                              <strong>How it works:</strong> This will create a Pinterest image using the first and last images from your recipe, with the overlay text from your Pinterest variations in the middle.
                            </div>
                            
                            <div class="mb-3">
                              <label class="form-label">Preview Text Overlay</label>
                              <% if (pinterestVariations && pinterestVariations.length > 0) { %>
                                <p class="form-control-plaintext fw-bold" style="color: #e60023;">
                                  "<%= pinterestVariations[0].overlay_text %>"
                                </p>
                              <% } else { %>
                                <p class="form-control-plaintext text-muted">
                                  No overlay text available. Please generate Pinterest content first.
                                </p>
                              <% } %>
                            </div>
                            
                            <!-- Style Note -->
                            <div class="mb-3">
                              <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i>
                                <strong>Pinterest Style:</strong> Using your global Pinterest style preference set above. 
                                To change the style, scroll up to the Pinterest Style Preference section.
                              </div>
                            </div>
                          </div>
                          
                          <div class="col-md-4">
                            <div class="d-grid gap-2">
                              <% if (pinterestVariations && pinterestVariations.length > 0) { %>
                                <button id="generatePinterestImage" class="btn btn-pinterest" data-recipe-id="<%= recipe.id %>">
                                  <i class="fas fa-image"></i> Generate Pinterest Image
                                </button>
                              <% } else { %>
                                <button class="btn btn-secondary" disabled>
                                  <i class="fas fa-exclamation-triangle"></i> Need Pinterest Content First
                                </button>
                              <% } %>
                              
                              <div id="pinterestGenerationStatus" class="mt-2">
                                <!-- Status messages will appear here -->
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% } %>
          
          <!-- Blog Content Tab -->
          <% if (blog) { %>
            <div class="tab-pane fade <%= !facebook && (!pinterestVariations || pinterestVariations.length === 0) ? 'show active' : '' %>" id="blog" role="tabpanel" aria-labelledby="blog-tab">
              <div class="row">
                <div class="col-md-12">
                  <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3>Blog Post</h3>
                    <button class="btn btn-outline-primary copy-btn" data-content="blogpost">
                      <i class="fa fa-copy"></i> Copy HTML
                    </button>
                  </div>
                  
                  <div class="card">
                    <div class="card-header bg-wordpress text-white">
                      <h4 class="mb-0">Blog Post Preview</h4>
                    </div>
                    <div class="card-body">
                      <div id="blog-preview">
                        <%- blog.html_content %>
                      </div>
                      
                      <!-- Hidden content for copy -->
                      <div id="blogpost" class="d-none"><%= blog.html_content %></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% } %>
        </div>
        
        <!-- WordPress Publishing Section -->
        <div class="card mt-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">WordPress Publishing</h5>
            <button type="button" class="btn btn-sm btn-outline-primary" id="publishToWordPress">
              Publish to WordPress
            </button>
          </div>
          <div class="card-body">
            <div id="wpStatus">
              <!-- WordPress publication history will be displayed here -->
              <div class="placeholder-glow">
                <p class="placeholder col-12"></p>
                <p class="placeholder col-10"></p>
              </div>
            </div>
            
            <div id="wpPublishForm" class="mt-3 d-none">
              <h6>Publish Options</h6>
              <form id="wordpressPublishForm" class="mb-3">
                <div class="mb-3">
                  <label for="wpPostStatus" class="form-label">Post Status</label>
                  <select class="form-select" id="wpPostStatus" name="status">
                    <option value="draft">Draft</option>
                    <option value="publish">Published</option>
                    <option value="pending">Pending Review</option>
                    <option value="private">Private</option>
                  </select>
                </div>

                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" id="wpAddRecipe" name="addRecipe" checked>
                  <label class="form-check-label" for="wpAddRecipe">
                    Add recipe to post using WP Recipe Maker
                  </label>
                  <div class="form-text">If checked, the recipe data will be added to the post using WP Recipe Maker plugin.</div>
                </div>
                <div class="form-check mb-3">
                  <input class="form-check-input" type="checkbox" id="wpFormatContent" name="formatContent" checked>
                  <label class="form-check-label" for="wpFormatContent">
                    Format content for WordPress Gutenberg
                  </label>
                </div>
                <input type="hidden" name="recipeId" value="<%= recipe.id %>">
                <button type="submit" class="btn btn-primary">Publish</button>
                <button type="button" class="btn btn-outline-secondary ms-2" id="cancelPublish">Cancel</button>
              </form>
            </div>
            
            <div id="wpPublicationHistory" class="mt-3">
              <!-- Publication history will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- CSV Export Info Modal -->
  <div class="modal fade" id="csvExportInfoModal" tabindex="-1" aria-labelledby="csvExportInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="csvExportInfoModalLabel">CSV Export for Canva Integration</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="row">
            <div class="col-md-12">
              <h4>About the CSV Export Feature</h4>
              <p>The CSV Export button generates a file containing the following information:</p>
              <ul>
                <li><strong>Recipe Title</strong>: The title of your recipe</li>
                <li><strong>Ingredients 1-4</strong>: The first four ingredients from your recipe</li>
                <li><strong>Image Path</strong>: The path to your recipe image</li>
              </ul>
              
              <h4>How to Use with Canva</h4>
              <ol>
                <li>Click the <strong>Export CSV</strong> button to download the recipe data</li>
                <li>Open Canva and navigate to your template</li>
                <li>Use Canva's "Bulk Create" feature (Pro accounts)</li>
                <li>Upload the CSV file when prompted</li>
                <li>Map the CSV columns to the appropriate fields in your template</li>
                <li>Generate all your designs at once!</li>
              </ol>
              
              <div class="alert alert-info">
                <i class="fa fa-info-circle"></i> Need to export multiple recipes at once? Go to the Recipes page and use the "Export All as CSV" button.
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <a href="/api/export/recipe/<%= recipe.id %>/csv" class="btn btn-primary" download>
            <i class="fa fa-file-csv"></i> Export Now
          </a>
        </div>
      </div>
    </div>
  </div>


  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/midjourney-grid-viewer.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // ‚úÖ GLOBAL PINTEREST STYLE SELECTOR
      const globalDesignVariationSelect = document.getElementById('globalDesignVariation');
      if (globalDesignVariationSelect) {
        // Load saved style preference on page load
        const savedStyle = localStorage.getItem('pinterestDesignStyle');
        if (savedStyle) {
          globalDesignVariationSelect.value = savedStyle;
          console.log('‚úÖ Loaded saved Pinterest style:', savedStyle);
        } else {
          // Default to random if no preference saved
          globalDesignVariationSelect.value = 'random';
          console.log('üé≤ Using default Random style');
        }
        
        // Save style preference when user changes selection
        globalDesignVariationSelect.addEventListener('change', function() {
          const selectedStyle = this.value;
          localStorage.setItem('pinterestDesignStyle', selectedStyle);
          console.log('üíæ Saved Pinterest style preference:', selectedStyle);
          
          // Show visual feedback
          if (selectedStyle === 'random') {
            console.log('üé≤ Style set to Random - will pick different designs each time');
          } else {
            console.log(`üé® Style set to Style ${selectedStyle} - will use consistently across all recipes`);
          }
          
          // Optional: Show a toast notification
          showStyleChangeNotification(selectedStyle);
        });
      }

      // Show notification when style changes
      function showStyleChangeNotification(style) {
        // Create temporary notification
        const notification = document.createElement('div');
        notification.className = 'alert alert-success alert-dismissible fade show position-fixed';
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        
        const styleName = style === 'random' ? 'Random Style üé≤' : `Style ${style} üé®`;
        notification.innerHTML = `
          <i class="fab fa-pinterest me-2"></i>
          <strong>Pinterest Style Updated!</strong><br>
          <small>Now using: ${styleName}</small>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-remove after 4 seconds
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 4000);
      }

      // Blog generation from variation
      document.querySelectorAll('.generate-blog-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          
          const form = this.closest('form');
          const index = this.getAttribute('data-index');
          const originalText = this.innerHTML;
          
          this.disabled = true;
          this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
          
          fetch(form.action, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              recipeId: form.querySelector('input[name="recipeId"]').value,
              variationId: form.querySelector('input[name="variationId"]').value
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update blog tab with new content
              const blogPreview = document.getElementById('blog-preview');
              if (blogPreview) {
                blogPreview.innerHTML = data.blogContent;
              }
              
              // Update hidden content for copy
              const blogpost = document.getElementById('blogpost');
              if (blogpost) {
                blogpost.innerText = data.blogContent;
              }
              
              // Switch to blog tab
              const blogTab = document.getElementById('blog-tab');
              if (blogTab) {
                blogTab.click();
              }
              
              this.innerHTML = '<i class="fa fa-check"></i> Success!';
              setTimeout(() => {
                this.innerHTML = originalText;
                this.disabled = false;
              }, 2000);
            } else {
              this.innerHTML = '<i class="fa fa-times"></i> Failed!';
              setTimeout(() => {
                this.innerHTML = originalText;
                this.disabled = false;
              }, 2000);
              alert('Failed to generate blog: ' + data.message);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            this.innerHTML = '<i class="fa fa-times"></i> Error!';
            setTimeout(() => {
              this.innerHTML = originalText;
              this.disabled = false;
            }, 2000);
            alert('An error occurred: ' + error.message);
          });
        });
      });
      
      // Copy button functionality
      document.querySelectorAll('.copy-btn').forEach(button => {
        button.addEventListener('click', function() {
          const contentId = this.getAttribute('data-content');
          const contentElement = document.getElementById(contentId);
          const text = contentElement.innerText || contentElement.textContent;
          
          navigator.clipboard.writeText(text).then(() => {
            // Show success indicator
            const originalHTML = this.innerHTML;
            this.innerHTML = '<i class="fa fa-check"></i> Copied!';
            setTimeout(() => {
              this.innerHTML = originalHTML;
            }, 2000);
          }).catch(err => {
            console.error('Could not copy text: ', err);
          });
        });
      });
      
      // Midjourney Grid Viewer initialization
      // Replace the Midjourney Grid Viewer initialization section in recipe-view.ejs
// This goes in the <script> section where MidjourneyGridViewer is currently initialized

// Midjourney Grid Viewer initialization
if (document.getElementById('midjourney-grid-container')) {
  // Initialize the grid viewer with the current recipe data
  const recipeId = '<%= recipe.id %>'; // Get the recipe ID from your template
  
  // Get the prompt from your recipe data if available
  let prompt = '';
  <% if (facebook && facebook.mj_prompt) { %>
    prompt = '<%= facebook.mj_prompt %>';
  <% } %>
  
  // If you have the image URL from Midjourney already, set it here
  const imageUrl = '<%= midjourneyImageUrl || "" %>'; // This should be set in your route
  
  // Check if recipe already has processed images
  checkRecipeImages(recipeId, imageUrl, prompt);
}

// Function to check if recipe has existing processed images
async function checkRecipeImages(recipeId, imageUrl, prompt) {
  try {
    // First check if the recipe has any processed images
    const response = await fetch(`/midjourney/api/recipe/${recipeId}`);
    const data = await response.json();
    
    let hasSelectedImage = false;
    let selectedImageUrl = null;
    
    if (data.success && data.images && data.images.length > 0) {
      // Check if any images are completed (not just pending/failed)
      const completedImages = data.images.filter(img => img.status === 'completed' && img.image_path);
      
      if (completedImages.length > 0) {
        // Recipe has at least one completed image
        hasSelectedImage = true;
        // Use the most recent completed image
        const latestImage = completedImages[0]; // Images are sorted by creation date (newest first)
        selectedImageUrl = `/recipe_images/${latestImage.image_path}`;
        
        console.log('Recipe already has selected image:', selectedImageUrl);
      }
    }
    
    // Initialize the grid viewer based on whether an image is already selected
    if (imageUrl || hasSelectedImage) {
      const gridViewer = new MidjourneyGridViewer({
        containerSelector: '#midjourney-grid-container',
        imageUrl: imageUrl,
        recipeId: recipeId,
        prompt: prompt,
        hasSelectedImage: hasSelectedImage,        // NEW: Pass the selected image status
        selectedImageUrl: selectedImageUrl,        // NEW: Pass the selected image URL
        onImageProcessed: function(result) {
          // Show success message
          const feedback = document.getElementById('processedImageFeedback');
          const message = document.getElementById('processedImageMessage');
          
          if (feedback && message) {
            message.textContent = 'Image processed and saved to recipe images!';
            feedback.style.display = 'block';
            
            // Automatically hide after 5 seconds
            setTimeout(() => {
              feedback.style.display = 'none';
            }, 5000);
          }
          
          console.log('Image processed successfully:', result);
        },
        onError: function(error) {
          // Show error message
          const feedback = document.getElementById('processedImageFeedback');
          const message = document.getElementById('processedImageMessage');
          
          if (feedback && message) {
            feedback.classList.remove('alert-success');
            feedback.classList.add('alert-danger');
            message.textContent = `Error: ${error.message || 'Failed to process image'}`;
            feedback.style.display = 'block';
          }
          
          console.error('Image processing error:', error);
        }
      });
    } else {
      // No image URL and no selected image - show info message
      document.getElementById('midjourney-grid-container').innerHTML = `
        <div class="alert alert-info">
          <i class="bi bi-info-circle-fill me-2"></i>
          <strong>No Midjourney Image Available</strong>
          <p class="mb-2 mt-2">To generate an image for this recipe:</p>
          <ol class="mb-2">
            <li>Use the Midjourney prompt above to generate an image in Discord</li>
            <li>Once generated, the image will appear here for selection</li>
            <li>Click on your preferred quadrant to save it to this recipe</li>
          </ol>
          <button class="btn btn-sm btn-primary" onclick="checkForNewImages()">
            <i class="bi bi-arrow-clockwise"></i> Check for New Images
          </button>
        </div>
      `;
    }
    
  } catch (error) {
    console.error('Error checking recipe images:', error);
    
    // Fallback - initialize with basic setup
    if (imageUrl) {
      const gridViewer = new MidjourneyGridViewer({
        containerSelector: '#midjourney-grid-container',
        imageUrl: imageUrl,
        recipeId: recipeId,
        prompt: prompt,
        hasSelectedImage: false,
        selectedImageUrl: null,
        onImageProcessed: function(result) {
          console.log('Image processed successfully:', result);
          // Show success feedback if elements exist
          const feedback = document.getElementById('processedImageFeedback');
          const message = document.getElementById('processedImageMessage');
          if (feedback && message) {
            message.textContent = 'Image processed and saved to recipe images!';
            feedback.style.display = 'block';
          }
        },
        onError: function(error) {
          console.error('Image processing error:', error);
          // Show error feedback if elements exist
          const feedback = document.getElementById('processedImageFeedback');
          const message = document.getElementById('processedImageMessage');
          if (feedback && message) {
            feedback.classList.remove('alert-success');
            feedback.classList.add('alert-danger');
            message.textContent = `Error: ${error.message || 'Failed to process image'}`;
            feedback.style.display = 'block';
          }
        }
      });
    } else {
      document.getElementById('midjourney-grid-container').innerHTML = 
        '<div class="alert alert-warning">Error loading image interface. Please refresh the page.</div>';
    }
  }
}

// Function to manually check for new images (called by the button)
async function checkForNewImages() {
  const recipeId = '<%= recipe.id %>';
  const button = event.target.closest('button');
  
  // Show loading state
  const originalText = button.innerHTML;
  button.disabled = true;
  button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Checking...';
  
  try {
    // Re-check for images
    const response = await fetch(`/midjourney/api/recipe/${recipeId}`);
    const data = await response.json();
    
    if (data.success && data.images && data.images.length > 0) {
      // Check for completed images
      const completedImages = data.images.filter(img => img.status === 'completed' && img.image_path);
      
      if (completedImages.length > 0) {
        // Found images - reload the page to refresh the interface
        window.location.reload();
        return;
      }
    }
    
    // No new images found
    button.innerHTML = '<i class="bi bi-x-circle"></i> No New Images';
    setTimeout(() => {
      button.innerHTML = originalText;
      button.disabled = false;
    }, 2000);
    
  } catch (error) {
    console.error('Error checking for new images:', error);
    button.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Error';
    setTimeout(() => {
      button.innerHTML = originalText;
      button.disabled = false;
    }, 2000);
  }
}
      // WordPress publishing functionality
      const publishBtn = document.getElementById('publishToWordPress');
      const wpStatus = document.getElementById('wpStatus');
      const wpPublishForm = document.getElementById('wpPublishForm');
      const wpPublicationHistory = document.getElementById('wpPublicationHistory');
      const publishForm = document.getElementById('wordpressPublishForm');
      const cancelBtn = document.getElementById('cancelPublish');
      
      // Load WordPress settings and publication history
      loadWordPressInfo();
      
      // Show publish form when button is clicked
      publishBtn.addEventListener('click', function() {
        wpPublishForm.classList.remove('d-none');
        publishBtn.classList.add('d-none');
      });
      
      // Hide form when cancel is clicked
      cancelBtn.addEventListener('click', function() {
        wpPublishForm.classList.add('d-none');
        publishBtn.classList.remove('d-none');
      });
      
      // Handle form submission
      publishForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(publishForm);
        const recipeId = formData.get('recipeId');
        const status = formData.get('status');
        const formatContent = formData.get('formatContent') === 'on';
        const addRecipe = formData.get('addRecipe') === 'on';
        
        publishBtn.disabled = true;
        publishForm.querySelector('button[type="submit"]').disabled = true;
        publishForm.querySelector('button[type="submit"]').innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Publishing...';
        
        try {
          // Use the recipe-aware endpoint if adding recipe
          const endpoint = addRecipe ? '/api/wordpress/publish-with-recipe' : '/api/wordpress/publish-formatted';
          
          const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              recipeId,
              status,
              formatContent
            })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Show success message
            wpPublishForm.classList.add('d-none');
            publishBtn.classList.remove('d-none');
            
            // Reload WordPress info
            loadWordPressInfo();
            
            // Success alert
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.innerHTML = `
              <strong>Success!</strong> Published to WordPress as ${status}.
              <a href="${result.post.url}" target="_blank" class="alert-link">View Post</a>
              ${result.recipe ? '<br>Recipe added successfully using WP Recipe Maker.' : ''}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.card-body').prepend(alertDiv);
          } else {
            throw new Error(result.message || 'Failed to publish');
          }
        } catch (error) {
          console.error('Publishing error:', error);
          
          // Error alert
          const alertDiv = document.createElement('div');
          alertDiv.className = 'alert alert-danger alert-dismissible fade show';
          alertDiv.innerHTML = `
            <strong>Error!</strong> ${error.message || 'Failed to publish to WordPress'}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          `;
          document.querySelector('.card-body').prepend(alertDiv);
        } finally {
          publishBtn.disabled = false;
          publishForm.querySelector('button[type="submit"]').disabled = false;
          publishForm.querySelector('button[type="submit"]').innerHTML = 'Publish';
        }
      });
      
      // Function to load WordPress settings and publication history
      async function loadWordPressInfo() {
        try {
          // Get WordPress settings
          const settingsResponse = await fetch('/api/wordpress/settings');
          const settingsData = await settingsResponse.json();
          
          // Get publication history
          const recipeId = '<%= recipe.id %>';
          const publicationsResponse = await fetch(`/api/wordpress/publications/${recipeId}`);
          const publicationsData = await publicationsResponse.json();
          
          // Update status display
          if (settingsData.success) {
            if (publicationsData.success && publicationsData.publications && publicationsData.publications.length > 0) {
              // Show publication history
              const publications = publicationsData.publications;
              
              // Update status message
              wpStatus.innerHTML = `
                <div class="d-flex align-items-center">
                  <i class="bi bi-wordpress text-success me-2" style="font-size: 1.5rem;"></i>
                  <div>
                    <p class="mb-1">This recipe has been published to WordPress</p>
                    <p class="text-muted small mb-0">Connected to: ${settingsData.settings.site_url}</p>
                  </div>
                </div>
              `;
              
              // Show publication history
              wpPublicationHistory.innerHTML = `
                <h6>Publication History</h6>
                <div class="table-responsive">
                  <table class="table table-sm">
                    <thead>
                      <tr>
                        <th>Date</th>
                        <th>Status</th>
                        <th>Link</th>
                      </tr>
                    </thead>
                    <tbody>
                      ${publications.map(pub => `
                        <tr>
                          <td>${new Date(pub.created_at).toLocaleDateString()}</td>
                          <td><span class="badge bg-${
                            pub.wp_status === 'publish' ? 'success' : 
                            pub.wp_status === 'draft' ? 'secondary' : 
                            pub.wp_status === 'pending' ? 'warning' : 'info'
                          }">${pub.wp_status}</span></td>
                          <td><a href="${pub.wp_post_url}" target="_blank">View</a></td>
                        </tr>
                      `).join('')}
                    </tbody>
                  </table>
                </div>
              `;
            } else {
              // Show not published yet
              wpStatus.innerHTML = `
                <div class="d-flex align-items-center">
                  <i class="bi bi-wordpress me-2" style="font-size: 1.5rem;"></i>
                  <div>
                    <p class="mb-1">This recipe has not been published to WordPress yet</p>
                    <p class="text-muted small mb-0">Connected to: ${settingsData.settings.site_url}</p>
                  </div>
                </div>
              `;
              
              wpPublicationHistory.innerHTML = '';
            }
            
            // Enable publish button
            publishBtn.disabled = false;
          } else {
            // WordPress not configured
            wpStatus.innerHTML = `
              <div class="alert alert-warning mb-0">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                WordPress publishing is not configured.
                <a href="/wordpress-settings" class="alert-link">Configure WordPress Settings</a>
              </div>
            `;
            
            // Disable publish button
            publishBtn.disabled = true;
            wpPublicationHistory.innerHTML = '';
          }
        } catch (error) {
          console.error('Error loading WordPress info:', error);
          wpStatus.innerHTML = `
            <div class="alert alert-danger mb-0">
              <i class="bi bi-exclamation-triangle-fill me-2"></i>
              Error loading WordPress information: ${error.message}
            </div>
          `;
        }
      }

      // CSV Export Info Modal functionality
      const csvExportButtons = document.querySelectorAll('a[href^="/api/export/recipe/"][download]');
      
      csvExportButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          // Check if the user has seen the info before
          if (!localStorage.getItem('csvExportInfoSeen')) {
            e.preventDefault();
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('csvExportInfoModal'));
            modal.show();
            
            // Mark as seen
            localStorage.setItem('csvExportInfoSeen', 'true');
          }
        });
      });
    });

    // Pinterest Image Generation Functionality
    document.addEventListener('DOMContentLoaded', function() {
      const generateBtn = document.getElementById('generatePinterestImage');
      const refreshBtn = document.getElementById('refreshPinterestImages');
      const statusDiv = document.getElementById('pinterestGenerationStatus');
      const imagesList = document.getElementById('pinterestImagesList');

      // Load existing Pinterest images on page load
      if (refreshBtn) {
        loadPinterestImages();
        refreshBtn.addEventListener('click', loadPinterestImages);
      }


      // Generate Pinterest image
      if (generateBtn) {
        generateBtn.addEventListener('click', async function() {
          const recipeId = this.getAttribute('data-recipe-id');
          
          if (!recipeId) {
            showStatus('error', 'Recipe ID not found');
            return;
          }

          // Disable button and show loading
          generateBtn.disabled = true;
          generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
          showStatus('info', 'Generating Pinterest image... This may take a few seconds.');

          try {
            // Get saved design variation from global preference
            const selectedValue = localStorage.getItem('pinterestDesignStyle') || 'random';
            let actualVariation;
            
            if (selectedValue === 'random') {
              // Array of available style numbers (all our current styles)
              const availableStyles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22];
              // Pick a random style from the available ones
              actualVariation = availableStyles[Math.floor(Math.random() * availableStyles.length)];
              console.log('üé≤ Random style selected:', actualVariation);
              showStatus('info', `üé≤ Random style selected: Style ${actualVariation}! Generating Pinterest image...`);
            } else {
              actualVariation = parseInt(selectedValue);
              console.log('üé® Using global style preference:', actualVariation);
              showStatus('info', `üé® Using your preferred Style ${actualVariation}! Generating Pinterest image...`);
            }
            
            const payload = {
              variation: actualVariation
            };
            
            const response = await fetch(`/api/pinterest/generate-image/${recipeId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.success) {
              if (selectedValue === 'random') {
                showStatus('success', `üé≤ Pinterest image generated successfully using Style ${actualVariation}!`);
              } else {
                showStatus('success', 'Pinterest image generated successfully!');
              }
              loadPinterestImages(); // Refresh the images list
            } else {
              showStatus('error', result.message || 'Failed to generate Pinterest image');
            }

          } catch (error) {
            console.error('Pinterest generation error:', error);
            showStatus('error', 'Network error: ' + error.message);
          } finally {
            // Re-enable button
            generateBtn.disabled = false;
            generateBtn.innerHTML = '<i class="fas fa-image"></i> Generate Pinterest Image';
          }
        });
      }

      // Load Pinterest images for this recipe
      async function loadPinterestImages() {
        const recipeId = '<%= recipe.id %>';
        
        try {
          const response = await fetch(`/api/pinterest/images/${recipeId}`);
          const result = await response.json();

          if (result.success && result.pinterestImages) {
            displayPinterestImages(result.pinterestImages);
          } else {
            imagesList.innerHTML = '<div class="col-12"><p class="text-muted">No Pinterest images generated yet.</p></div>';
          }
        } catch (error) {
          console.error('Error loading Pinterest images:', error);
          imagesList.innerHTML = '<div class="col-12"><p class="text-danger">Error loading Pinterest images.</p></div>';
        }
      }

      // Display Pinterest images
      function displayPinterestImages(images) {
        if (!images || images.length === 0) {
          imagesList.innerHTML = '<div class="col-12"><p class="text-muted">No Pinterest images generated yet.</p></div>';
          return;
        }

        const imagesHtml = images.map(image => `
          <div class="col-md-4 mb-3">
            <div class="card h-100">
              <img src="${image.image_url}" class="card-img-top" alt="Pinterest Image" style="height: 300px; object-fit: cover;">
              <div class="card-body">
                <h6 class="card-title">${image.keyword}</h6>
                <p class="card-text"><small class="text-muted">Text: "${image.text_overlay}"</small></p>
                <p class="card-text"><small class="text-muted">Generated: ${new Date(image.created_at).toLocaleString()}</small></p>
                <div class="d-flex gap-2">
                  <a href="${image.image_url}" target="_blank" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-eye"></i> View
                  </a>
                  <a href="${image.image_url}" download="${image.filename}" class="btn btn-sm btn-outline-success">
                    <i class="bi bi-download"></i> Download
                  </a>
                  <button onclick="deletePinterestImage('${image.id}')" class="btn btn-sm btn-outline-danger">
                    <i class="bi bi-trash"></i> Delete
                  </button>
                </div>
              </div>
            </div>
          </div>
        `).join('');

        imagesList.innerHTML = imagesHtml;
      }

      // Show status message
      function showStatus(type, message) {
        const alertClass = {
          'success': 'alert-success',
          'error': 'alert-danger',
          'info': 'alert-info',
          'warning': 'alert-warning'
        }[type] || 'alert-info';

        statusDiv.innerHTML = `
          <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        `;

        // Auto-hide success/info messages after 5 seconds
        if (type === 'success' || type === 'info') {
          setTimeout(() => {
            const alert = statusDiv.querySelector('.alert');
            if (alert) {
              const bsAlert = new bootstrap.Alert(alert);
              bsAlert.close();
            }
          }, 5000);
        }
      }

      // Delete Pinterest image function (global scope)
      window.deletePinterestImage = async function(imageId) {
        if (!confirm('Are you sure you want to delete this Pinterest image?')) {
          return;
        }

        try {
          const response = await fetch(`/api/pinterest/images/${imageId}`, {
            method: 'DELETE'
          });

          const result = await response.json();

          if (result.success) {
            showStatus('success', 'Pinterest image deleted successfully');
            loadPinterestImages(); // Refresh the list
          } else {
            showStatus('error', result.message || 'Failed to delete Pinterest image');
          }
        } catch (error) {
          console.error('Error deleting Pinterest image:', error);
          showStatus('error', 'Network error: ' + error.message);
        }
      };
    });
  </script>

  <!-- Buffer Publish Modal -->
  <div class="modal fade" id="bufferPublishModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Publish Recipe to Buffer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div id="bufferPublishStatus"></div>
          
          <!-- Title (auto-filled from Pinterest) -->
          <div class="mb-3">
            <label for="bufferTitle" class="form-label">Title</label>
            <input type="text" class="form-control" id="bufferTitle" placeholder="Pin title">
          </div>
          
          <!-- Description (auto-filled from Pinterest + recipe) -->
          <div class="mb-3">
            <label for="bufferDescription" class="form-label">Description</label>
            <textarea class="form-control" id="bufferDescription" rows="4" placeholder="Pin description"></textarea>
          </div>
          
          <!-- Source URL (auto-filled with recipe link) -->
          <div class="mb-3">
            <label for="bufferSourceUrl" class="form-label">Source URL</label>
            <input type="url" class="form-control" id="bufferSourceUrl" placeholder="Recipe link">
          </div>
          
          <!-- Buffer Board Selection -->
          <div class="mb-3">
            <label for="bufferBoardSelect" class="form-label">Buffer Board</label>
            <select class="form-select" id="bufferBoardSelect">
              <option value="">Loading boards...</option>
            </select>
            <div class="form-text">Select which Buffer board to publish to</div>
          </div>
          
          <!-- Publishing Options -->
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="radio" name="bufferPublishType" id="bufferShareNow" value="now" checked>
              <label class="form-check-label" for="bufferShareNow">
                Share Now
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="bufferPublishType" id="bufferSchedule" value="schedule">
              <label class="form-check-label" for="bufferSchedule">
                Schedule for Later
              </label>
            </div>
          </div>
          
          <!-- Schedule Time (hidden by default) -->
          <div class="mb-3" id="bufferScheduleTime" style="display: none;">
            <label for="bufferDateTime" class="form-label">Schedule Date & Time</label>
            <input type="datetime-local" class="form-control" id="bufferDateTime">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-warning" id="confirmBufferPublish">
            <i class="bi bi-send"></i> Publish to Buffer
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Buffer Publishing Functionality for Recipe Page
    document.addEventListener('DOMContentLoaded', function() {
      let currentRecipeId = null;

      // Handle Buffer publish button click
      document.getElementById('bufferPublishBtn').addEventListener('click', function() {
        currentRecipeId = this.getAttribute('data-recipe-id');
        
        // Clear status and load recipe data
        document.getElementById('bufferPublishStatus').innerHTML = '';
        loadRecipeForBuffer(currentRecipeId);
      });

      // Handle publish type radio buttons
      document.addEventListener('change', function(e) {
        if (e.target.name === 'bufferPublishType') {
          const scheduleTimeDiv = document.getElementById('bufferScheduleTime');
          if (e.target.value === 'schedule') {
            scheduleTimeDiv.style.display = 'block';
            // Set default time to 1 hour from now
            const now = new Date();
            now.setHours(now.getHours() + 1);
            document.getElementById('bufferDateTime').value = now.toISOString().slice(0, 16);
          } else {
            scheduleTimeDiv.style.display = 'none';
          }
        }
      });

      // Auto-populate Buffer modal when shown
      document.getElementById('bufferPublishModal').addEventListener('shown.bs.modal', async function() {
        console.log('üîß Buffer modal opened, auto-populating content...');
        
        if (!currentRecipeId) {
          console.log('‚ùå No recipe ID available');
          return;
        }

        try {
          // Load Buffer boards first
          await loadBufferBoards();
          
          // Load recipe data first
          const recipeResponse = await fetch(`/api/recipes/${currentRecipeId}`);
          let recipe = null;
          if (recipeResponse.ok) {
            const recipeData = await recipeResponse.json();
            recipe = recipeData.recipe;
            console.log('üìñ Recipe data loaded:', recipe);
            console.log('üìñ ALL Recipe fields:', Object.keys(recipe || {}));
            console.log('üìñ Pinterest-related fields in recipe:', {
              pinterest_title: recipe?.pinterest_title,
              pinterest_description: recipe?.pinterest_description,
              pinterestTitle: recipe?.pinterestTitle,
              pinterestDescription: recipe?.pinterestDescription,
              pinterest_content: recipe?.pinterest_content,
              pinTitle: recipe?.pinTitle,
              pinDescription: recipe?.pinDescription
            });
          }

          // Load Pinterest variations (title/description) for this recipe
          const pinterestVariationsResponse = await fetch(`/api/pinterest/variations/${currentRecipeId}`);
          let pinterestVariations = null;
          if (pinterestVariationsResponse.ok) {
            const variationsData = await pinterestVariationsResponse.json();
            pinterestVariations = variationsData.variations || [];
            console.log('üìå Pinterest variations loaded:', pinterestVariations);
          }

          // Load Pinterest images for this recipe
          const pinterestResponse = await fetch(`/api/pinterest/images/${currentRecipeId}`);
          if (pinterestResponse.ok) {
            const pinterestData = await pinterestResponse.json();
            console.log('üìå Pinterest data loaded:', pinterestData);
            console.log('üìå First Pinterest image fields:', pinterestData.pinterestImages?.[0] ? Object.keys(pinterestData.pinterestImages[0]) : 'No images');
            if (pinterestData.pinterestImages?.[0]) {
              console.log('üìå Pinterest image ALL fields:', Object.keys(pinterestData.pinterestImages[0]));
              console.log('üìå Pinterest image complete data:', pinterestData.pinterestImages[0]);
              console.log('üìå Looking for title/description in Pinterest image:', {
                text_overlay: pinterestData.pinterestImages[0].text_overlay,
                title: pinterestData.pinterestImages[0].title,
                description: pinterestData.pinterestImages[0].description,
                pinterest_title: pinterestData.pinterestImages[0].pinterest_title,
                pinterest_description: pinterestData.pinterestImages[0].pinterest_description,
                image_url: pinterestData.pinterestImages[0].image_url,
                image_path: pinterestData.pinterestImages[0].image_path,
                image_data: pinterestData.pinterestImages[0].image_data,
                filename: pinterestData.pinterestImages[0].filename,
                generation_metadata: pinterestData.pinterestImages[0].generation_metadata
              });
              
              // Check if generation_metadata contains Pinterest content
              if (pinterestData.pinterestImages[0].generation_metadata) {
                try {
                  const metadata = JSON.parse(pinterestData.pinterestImages[0].generation_metadata);
                  console.log('üìå Pinterest generation metadata:', metadata);
                } catch (e) {
                  console.log('üìå Pinterest generation metadata (raw):', pinterestData.pinterestImages[0].generation_metadata);
                }
              }
            }
            
            // Use actual Pinterest title and description from Pinterest variations
            let pinterestTitle = 'Delicious Recipe';
            let pinterestDescription = 'Amazing recipe that you\'ll love!';
            
            if (pinterestVariations && pinterestVariations.length > 0) {
              // Use the first Pinterest variation
              const firstVariation = pinterestVariations[0];
              pinterestTitle = firstVariation.pin_title || firstVariation.pinTitle || pinterestTitle;
              pinterestDescription = firstVariation.pin_description || firstVariation.pinDesc || pinterestDescription;
              
              console.log('‚úÖ Using Pinterest variation data:', {
                pin_title: firstVariation.pin_title,
                pin_description: firstVariation.pin_description,
                variation_number: firstVariation.variation_number
              });
            } else {
              // Fallback to recipe data
              pinterestTitle = recipe?.recipe_idea || pinterestTitle;
              pinterestDescription = recipe?.facebook_content?.substring(0, 200) || pinterestDescription;
              console.log('‚ö†Ô∏è No Pinterest variations found, using fallback');
            }
            
            document.getElementById('bufferTitle').value = pinterestTitle;
            document.getElementById('bufferDescription').value = pinterestDescription;
            
            console.log('‚úÖ Pinterest Title set (from variations):', pinterestTitle);
            console.log('‚úÖ Pinterest Description set (from variations):', pinterestDescription);
            
            if (pinterestData.success && pinterestData.pinterestImages && pinterestData.pinterestImages.length > 0) {
              const pinterestImage = pinterestData.pinterestImages[0];
              console.log('‚úÖ Pinterest Image available:', pinterestImage.image_url);
              console.log('‚úÖ Pinterest Image path:', pinterestImage.image_path);
            }
          }
          
          // Generate proper source URL using Pinterest SEO slug
          let recipeUrl = `${window.location.protocol}//${window.location.host}/recipe/${currentRecipeId}`;
          
          // Try to use Pinterest variation slug if available
          if (pinterestVariations && pinterestVariations.length > 0 && pinterestVariations[0].meta_slug) {
            // Load WordPress settings to get the proper domain
            try {
              const wpResponse = await fetch('/api/wordpress/settings');
              if (wpResponse.ok) {
                const wpData = await wpResponse.json();
                if (wpData.settings?.siteUrl) {
                  const domain = wpData.settings.siteUrl.replace(/\/$/, '');
                  const slug = pinterestVariations[0].meta_slug;
                  recipeUrl = `${domain}/${slug}`;
                  console.log('‚úÖ Using WordPress domain + SEO slug:', recipeUrl);
                }
              }
            } catch (e) {
              console.log('‚ö†Ô∏è Could not load WordPress settings, using fallback URL');
            }
          }
          
          document.getElementById('bufferSourceUrl').value = recipeUrl;
          console.log('‚úÖ Source URL set:', recipeUrl);
          
        } catch (error) {
          console.error('‚ùå Error loading Pinterest content:', error);
          
          // Fallback: use basic recipe data
          const title = recipe?.recipe_idea || 'Delicious Recipe';
          const description = recipe?.facebook_content ? 
            recipe.facebook_content.substring(0, 500) : 
            `Amazing ${recipe?.recipe_idea || 'recipe'} that you'll love!`;
          
          let recipeUrl = `${window.location.protocol}//${window.location.host}/recipe/${currentRecipeId}`;
          // This fallback will be improved by the server-side URL generation
          
          document.getElementById('bufferTitle').value = title;
          document.getElementById('bufferDescription').value = description;
          document.getElementById('bufferSourceUrl').value = recipeUrl;
          
          console.log('‚úÖ Fallback content set');
        }
      });

      // Handle confirm publish button
      document.getElementById('confirmBufferPublish').addEventListener('click', function() {
        if (!currentRecipeId) {
          showBufferStatus('No recipe selected', 'error');
          return;
        }

        const shareNow = document.getElementById('bufferShareNow').checked;
        const scheduleTime = shareNow ? null : document.getElementById('bufferDateTime').value;
        const customTitle = document.getElementById('bufferTitle').value.trim();
        const customDescription = document.getElementById('bufferDescription').value.trim();
        const sourceUrl = document.getElementById('bufferSourceUrl').value.trim();
        const selectedBoardId = document.getElementById('bufferBoardSelect').value;

        if (!customTitle) {
          showBufferStatus('Please enter a title', 'error');
          return;
        }
        
        if (!selectedBoardId) {
          showBufferStatus('Please select a Buffer board', 'error');
          return;
        }

        publishRecipeToBuffer(currentRecipeId, {
          shareNow,
          scheduleTime,
          customTitle,
          customDescription,
          sourceUrl,
          boardId: selectedBoardId
        });
      });

      // Load Buffer boards from settings
      async function loadBufferBoards() {
        try {
          const response = await fetch('/api/buffer/boards');
          if (response.ok) {
            const data = await response.json();
            const boardSelect = document.getElementById('bufferBoardSelect');
            
            // Clear existing options
            boardSelect.innerHTML = '';
            
            if (data.boards && data.boards.length > 0) {
              data.boards.forEach(board => {
                const option = document.createElement('option');
                option.value = board.id;
                option.textContent = board.name;
                boardSelect.appendChild(option);
              });
              
              // Select first board by default
              if (data.boards.length > 0) {
                boardSelect.value = data.boards[0].id;
              }
            } else {
              const option = document.createElement('option');
              option.value = '';
              option.textContent = 'No boards configured';
              boardSelect.appendChild(option);
            }
          } else {
            console.error('Failed to load Buffer boards');
            const boardSelect = document.getElementById('bufferBoardSelect');
            boardSelect.innerHTML = '<option value="">Error loading boards</option>';
          }
        } catch (error) {
          console.error('Error loading Buffer boards:', error);
          const boardSelect = document.getElementById('bufferBoardSelect');
          boardSelect.innerHTML = '<option value="">Error loading boards</option>';
        }
      }

      // Load recipe data for Buffer publishing
      async function loadRecipeForBuffer(recipeId) {
        try {
          // Get Pinterest images for this recipe
          const pinterestResponse = await fetch(`/api/pinterest/images/${recipeId}`);
          
          let pinterestTitle = '';
          let pinterestDescription = '';
          
          if (pinterestResponse.ok) {
            const pinterestResult = await pinterestResponse.json();
            if (pinterestResult.success && pinterestResult.pinterestImages && pinterestResult.pinterestImages.length > 0) {
              const pinterestImage = pinterestResult.pinterestImages[0];
              pinterestTitle = pinterestImage.text_overlay || '';
              pinterestDescription = pinterestImage.text_overlay || '';
            }
          }

          // Get recipe details
          const recipeResponse = await fetch(`/api/recipes/${recipeId}`);
          
          if (recipeResponse.ok) {
            const recipeResult = await recipeResponse.json();
            if (recipeResult.success && recipeResult.recipe) {
              const recipe = recipeResult.recipe;
              
              // Fill title with Pinterest title or recipe title
              const title = pinterestTitle || recipe.recipe_idea || 'Delicious Recipe';
              document.getElementById('bufferTitle').value = title;
              
              // Fill description with Pinterest text + recipe content
              let description = '';
              if (pinterestDescription) {
                description = `${pinterestDescription}\n\n`;
              }
              
              if (recipe.facebook_content) {
                description += recipe.facebook_content.substring(0, 400);
              } else if (recipe.blog_content) {
                description += recipe.blog_content.substring(0, 400);
              } else if (recipe.recipe_idea) {
                description += `Check out this amazing recipe: ${recipe.recipe_idea}`;
              }
              
              document.getElementById('bufferDescription').value = description;
              
              // Fill source URL with recipe link
              const recipeUrl = `${window.location.origin}/recipe/${recipeId}`;
              document.getElementById('bufferSourceUrl').value = recipeUrl;
            }
          }
        } catch (error) {
          console.error('Error loading recipe for Buffer:', error);
          showBufferStatus('Error loading recipe data', 'error');
        }
      }

      // Publish recipe to Buffer
      async function publishRecipeToBuffer(recipeId, options) {
        const btn = document.getElementById('confirmBufferPublish');
        const originalText = btn.innerHTML;
        
        try {
          btn.disabled = true;
          btn.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>Publishing...';
          
          showBufferStatus('Publishing recipe to Buffer...', 'info');

          const response = await fetch(`/api/buffer/publish/recipe/${recipeId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(options)
          });

          const result = await response.json();

          if (result.success) {
            showBufferStatus(result.message || 'Successfully published to Buffer!', 'success');
            
            // Close modal after success using utility function
            setTimeout(() => {
              // Clear form after successful publish
              document.getElementById('bufferTitle').value = '';
              document.getElementById('bufferDescription').value = '';
              document.getElementById('bufferSourceUrl').value = '';
              document.getElementById('bufferShareNow').checked = false;
              
              // Force close modal with proper cleanup
              forceCloseModal('bufferPublishModal');
            }, 1500);
            
          } else {
            showBufferStatus(result.message || 'Failed to publish to Buffer', 'error');
          }

        } catch (error) {
          console.error('Error publishing to Buffer:', error);
          showBufferStatus('Error publishing to Buffer: ' + error.message, 'error');
        } finally {
          btn.disabled = false;
          btn.innerHTML = originalText;
        }
      }

      // Show Buffer status messages
      function showBufferStatus(message, type) {
        const statusDiv = document.getElementById('bufferPublishStatus');
        const alertClass = type === 'success' ? 'alert-success' : 
                         type === 'error' ? 'alert-danger' : 'alert-info';
        
        statusDiv.innerHTML = `<div class="alert ${alertClass} mb-3">${message}</div>`;
      }
      
      // Utility function to properly close modals and clean up
      function forceCloseModal(modalId) {
        try {
          const modalElement = document.getElementById(modalId);
          if (modalElement) {
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
              modal.hide();
            }
            
            // Force cleanup after a short delay
            setTimeout(() => {
              // Remove any remaining backdrops
              const backdrops = document.querySelectorAll('.modal-backdrop');
              backdrops.forEach(backdrop => backdrop.remove());
              
              // Clean up body classes and styles
              document.body.classList.remove('modal-open');
              document.body.style.overflow = '';
              document.body.style.paddingRight = '';
              document.body.style.marginRight = '';
              
              // Also clean up HTML element styles that might block scrolling
              document.documentElement.style.overflow = '';
              document.documentElement.style.paddingRight = '';
              document.documentElement.classList.remove('modal-open');
              
              // Clean up any container elements that might have scroll locks
              const containers = document.querySelectorAll('.container, .container-fluid, main, #app, .app-wrapper');
              containers.forEach(container => {
                container.style.overflow = '';
                container.style.height = '';
                container.style.maxHeight = '';
              });
              
              // Force enable scrolling on common elements
              const scrollElements = [document.body, document.documentElement];
              scrollElements.forEach(element => {
                element.style.overflowY = '';
                element.style.position = '';
                element.style.width = '';
                element.style.height = '';
              });
              
              // Hide the modal element itself if still visible
              modalElement.style.display = 'none';
              modalElement.classList.remove('show');
              modalElement.setAttribute('aria-hidden', 'true');
              modalElement.removeAttribute('aria-modal');
              
              // Final force scroll restoration
              setTimeout(() => {
                document.body.style.overflow = 'visible';
                document.documentElement.style.overflow = 'visible';
                window.scrollTo(window.scrollX, window.scrollY); // Trigger scroll recalculation
              }, 50);
              
              console.log(`‚úÖ Modal ${modalId} fully cleaned and closed with scroll restoration`);
            }, 150);
          }
        } catch (error) {
          console.error(`‚ùå Error closing modal ${modalId}:`, error);
          // Emergency scroll restoration
          document.body.style.overflow = '';
          document.documentElement.style.overflow = '';
        }
      }

      // Emergency scroll restoration - press ESC twice to force restore scrolling
      let escapePressed = 0;
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          escapePressed++;
          if (escapePressed >= 2) {
            console.log('üö® Emergency scroll restoration triggered');
            
            // Force restore scrolling on all possible elements
            document.body.style.overflow = '';
            document.body.style.overflowY = '';
            document.documentElement.style.overflow = '';
            document.documentElement.style.overflowY = '';
            document.body.classList.remove('modal-open');
            document.documentElement.classList.remove('modal-open');
            
            // Remove any lingering backdrops
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => backdrop.remove());
            
            // Force scroll recalculation
            window.scrollTo(window.scrollX, window.scrollY);
            
            alert('Emergency scroll restoration applied! You can now scroll normally.');
            escapePressed = 0;
          }
          
          // Reset counter after 2 seconds
          setTimeout(() => {
            escapePressed = 0;
          }, 2000);
        }
      });

      // Clear Buffer status when modal is opened
      document.getElementById('bufferPublishModal').addEventListener('show.bs.modal', function() {
        const statusDiv = document.getElementById('bufferPublishStatus');
        if (statusDiv) {
          statusDiv.innerHTML = '';
        }
        console.log('üìã Buffer modal opened, status cleared');
      });
      
      // Handle manual modal close
      document.getElementById('bufferPublishModal').addEventListener('hidden.bs.modal', function() {
        console.log('üìã Buffer modal closed manually');
        // Additional cleanup if needed
      });
    });
  </script>
</body>
</html>