<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Generation Queue Status</title>
    <style>
        .queue-status-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .queue-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e1e5e9;
        }

        .queue-title {
            font-size: 24px;
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
        }

        .refresh-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
        }

        .refresh-btn:hover {
            background: #2980b9;
        }

        .refresh-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        .queue-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #3498db;
        }

        .stat-number {
            font-size: 28px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #7f8c8d;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .jobs-section {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .section-header {
            background: #f8f9fa;
            padding: 20px;
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            border-bottom: 1px solid #e1e5e9;
        }

        .job-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .job-item {
            padding: 20px;
            border-bottom: 1px solid #ecf0f1;
            transition: background-color 0.2s;
        }

        .job-item:hover {
            background-color: #f8f9fa;
        }

        .job-item:last-child {
            border-bottom: none;
        }

        .job-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 10px;
        }

        .job-title {
            font-weight: 600;
            color: #2c3e50;
            flex-grow: 1;
        }

        .job-status {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-queued {
            background: #fff3cd;
            color: #856404;
        }

        .status-processing {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-completed {
            background: #d4edda;
            color: #155724;
        }

        .status-failed {
            background: #f8d7da;
            color: #721c24;
        }

        .status-cancelled {
            background: #e2e3e5;
            color: #383d41;
        }

        .job-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 10px;
            color: #6c757d;
            font-size: 14px;
        }

        .job-detail {
            display: flex;
            flex-direction: column;
        }

        .detail-label {
            font-weight: 600;
            margin-bottom: 2px;
            color: #495057;
        }

        .job-actions {
            margin-top: 15px;
            display: flex;
            gap: 10px;
        }

        .cancel-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.2s;
        }

        .cancel-btn:hover {
            background: #c0392b;
        }

        .cancel-btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        .empty-state {
            padding: 60px 20px;
            text-align: center;
            color: #6c757d;
        }

        .empty-icon {
            font-size: 48px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 40px;
            color: #6c757d;
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #e1e5e9;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .progress-bar {
            width: 100%;
            height: 4px;
            background: #ecf0f1;
            border-radius: 2px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #3498db, #2ecc71);
            border-radius: 2px;
            transition: width 0.3s ease;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 6px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: #27ae60;
        }

        .notification.error {
            background: #e74c3c;
        }

        .notification.info {
            background: #3498db;
        }

        @media (max-width: 768px) {
            .queue-stats {
                grid-template-columns: 1fr;
            }
            
            .job-details {
                grid-template-columns: 1fr;
            }
            
            .job-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="queue-status-container">
        <div class="queue-header">
            <h1 class="queue-title">ðŸŽ¨ Image Generation Queue</h1>
            <button class="refresh-btn" id="refreshBtn" onclick="refreshQueueStatus()">
                <span id="refreshText">Refresh</span>
            </button>
        </div>

        <div class="queue-stats" id="queueStats">
            <div class="stat-card">
                <div class="stat-number" id="totalQueued">-</div>
                <div class="stat-label">Total Queued</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="processing">-</div>
                <div class="stat-label">Processing Now</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="userJobs">-</div>
                <div class="stat-label">Your Jobs</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="nextPosition">-</div>
                <div class="stat-label">Next Position</div>
            </div>
        </div>

        <div class="jobs-section">
            <div class="section-header">
                Your Active Jobs
            </div>
            <div id="jobsList" class="job-list">
                <div class="loading">
                    <div class="spinner"></div>
                    Loading queue status...
                </div>
            </div>
        </div>
    </div>

    <script>
        let refreshInterval;
        let isRefreshing = false;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            refreshQueueStatus();
            startAutoRefresh();
        });

        async function refreshQueueStatus() {
            if (isRefreshing) return;
            
            isRefreshing = true;
            const refreshBtn = document.getElementById('refreshBtn');
            const refreshText = document.getElementById('refreshText');
            
            refreshBtn.disabled = true;
            refreshText.textContent = 'Refreshing...';

            try {
                const response = await fetch('/midjourney/api/queue-status');
                const data = await response.json();

                if (data.success) {
                    updateQueueStats(data.queueStats);
                    updateJobsList(data.userJobs);
                } else {
                    showNotification('Failed to fetch queue status: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error fetching queue status:', error);
                showNotification('Error connecting to server', 'error');
            } finally {
                isRefreshing = false;
                refreshBtn.disabled = false;
                refreshText.textContent = 'Refresh';
            }
        }

        function updateQueueStats(stats) {
            document.getElementById('totalQueued').textContent = stats.totalQueued || 0;
            document.getElementById('processing').textContent = stats.processing || 0;
            document.getElementById('nextPosition').textContent = stats.nextPosition || 1;
        }

        function updateJobsList(userJobs) {
            const jobsList = document.getElementById('jobsList');
            document.getElementById('userJobs').textContent = userJobs.length;

            if (userJobs.length === 0) {
                jobsList.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">ðŸŽ¯</div>
                        <h3>No Active Jobs</h3>
                        <p>You don't have any images currently in the generation queue.</p>
                    </div>
                `;
                return;
            }

            const jobsHTML = userJobs.map(job => {
                const estimatedTime = job.estimatedCompletion ? 
                    new Date(job.estimatedCompletion).toLocaleString() : 'Calculating...';
                
                const canCancel = job.status === 'queued';
                const statusClass = `status-${job.status}`;
                
                let progressHTML = '';
                if (job.status === 'processing') {
                    progressHTML = `
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 50%"></div>
                        </div>
                    `;
                }

                return `
                    <div class="job-item" data-job-id="${job.id}">
                        <div class="job-header">
                            <div class="job-title">Recipe #${job.recipeId}</div>
                            <div class="job-status ${statusClass}">${job.status}</div>
                        </div>
                        
                        <div class="job-details">
                            <div class="job-detail">
                                <span class="detail-label">Queue Position</span>
                                <span>${job.position || 'N/A'}</span>
                            </div>
                            <div class="job-detail">
                                <span class="detail-label">Estimated Completion</span>
                                <span>${estimatedTime}</span>
                            </div>
                            <div class="job-detail">
                                <span class="detail-label">Retry Count</span>
                                <span>${job.retryCount || 0}</span>
                            </div>
                            ${job.errorMessage ? `
                            <div class="job-detail">
                                <span class="detail-label">Last Error</span>
                                <span style="color: #e74c3c;">${job.errorMessage}</span>
                            </div>
                            ` : ''}
                        </div>
                        
                        ${progressHTML}
                        
                        ${canCancel ? `
                        <div class="job-actions">
                            <button class="cancel-btn" onclick="cancelJob('${job.id}')">
                                Cancel Job
                            </button>
                        </div>
                        ` : ''}
                    </div>
                `;
            }).join('');

            jobsList.innerHTML = jobsHTML;
        }

        async function cancelJob(jobId) {
            if (!confirm('Are you sure you want to cancel this image generation job?')) {
                return;
            }

            try {
                const response = await fetch(`/midjourney/api/cancel-job/${jobId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('Job cancelled successfully', 'success');
                    refreshQueueStatus();
                } else {
                    showNotification('Failed to cancel job: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error cancelling job:', error);
                showNotification('Error cancelling job', 'error');
            }
        }

        function startAutoRefresh() {
            // Refresh every 10 seconds
            refreshInterval = setInterval(() => {
                if (!isRefreshing) {
                    refreshQueueStatus();
                }
            }, 10000);
        }

        function stopAutoRefresh() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }
        }

        function showNotification(message, type = 'info') {
            // Remove existing notifications
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(n => n.remove());

            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            // Show notification
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Hide notification after 5 seconds
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 5000);
        }

        // Handle page visibility changes (pause auto-refresh when tab is hidden)
        document.addEventListener('visibilitychange', function() {
            if (document.hidden) {
                stopAutoRefresh();
            } else {
                startAutoRefresh();
                refreshQueueStatus(); // Refresh immediately when tab becomes visible
            }
        });

        // Clean up interval when page unloads
        window.addEventListener('beforeunload', stopAutoRefresh);
    </script>
</body>
</html>