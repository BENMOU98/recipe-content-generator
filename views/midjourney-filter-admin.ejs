<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Midjourney Prompt Filter - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .filter-stats {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .test-section {
            background: #f8f9fa;
            border-left: 4px solid #007bff;
        }
        .banned-word-item {
            transition: all 0.3s ease;
        }
        .banned-word-item:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .change-item {
            font-size: 0.9em;
            padding: 0.25rem 0.5rem;
            margin: 0.25rem 0;
            background: #e3f2fd;
            border-radius: 4px;
            border-left: 3px solid #2196f3;
        }
        .filter-result {
            max-height: 400px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h1 class="h3 mb-0"><i class="bi bi-shield-check"></i> Midjourney Prompt Filter Admin</h1>
                    <a href="/settings" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Settings
                    </a>
                </div>
            </div>
        </div>

        <!-- Statistics Card -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card filter-stats">
                    <div class="card-body">
                        <h5 class="card-title text-white"><i class="bi bi-graph-up"></i> Filter Statistics</h5>
                        <div class="row" id="statsContainer">
                            <div class="col-md-3 text-center">
                                <h3 class="text-white mb-0" id="totalPrompts">--</h3>
                                <small>Total Prompts</small>
                            </div>
                            <div class="col-md-3 text-center">
                                <h3 class="text-white mb-0" id="filteredPrompts">--</h3>
                                <small>Filtered Prompts</small>
                            </div>
                            <div class="col-md-3 text-center">
                                <h3 class="text-white mb-0" id="blockedPrompts">--</h3>
                                <small>Blocked Prompts</small>
                            </div>
                            <div class="col-md-3 text-center">
                                <h3 class="text-white mb-0" id="filterRate">--%</h3>
                                <small>Filter Rate</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Prompt Testing Section -->
            <div class="col-lg-6 mb-4">
                <div class="card h-100">
                    <div class="card-header test-section">
                        <h5 class="mb-0"><i class="bi bi-bug"></i> Test Prompt Filter</h5>
                    </div>
                    <div class="card-body">
                        <form id="testForm">
                            <div class="mb-3">
                                <label for="testPrompt" class="form-label">Enter prompt to test:</label>
                                <textarea class="form-control" id="testPrompt" rows="3" 
                                    placeholder="e.g., Professional food photography of chicken breasts with herbs"></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-play-circle"></i> Test Filter
                            </button>
                            <button type="button" class="btn btn-secondary ms-2" id="testBatchBtn">
                                <i class="bi bi-list-check"></i> Test Batch
                            </button>
                        </form>

                        <div id="testResults" class="mt-4" style="display: none;">
                            <h6>Filter Results:</h6>
                            <div id="testOutput" class="filter-result"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Banned Words Management -->
            <div class="col-lg-6 mb-4">
                <div class="card h-100">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="bi bi-x-circle"></i> Banned Words Management</h5>
                            <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#addWordModal">
                                <i class="bi bi-plus"></i> Add Word
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="bannedWordsList" class="filter-result">
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recent Filter Activity -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-clock-history"></i> Recent Filter Activity</h5>
                    </div>
                    <div class="card-body">
                        <div id="recentActivity" class="filter-result">
                            <div class="text-center">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Word Modal -->
    <div class="modal fade" id="addWordModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Banned Word</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addWordForm">
                        <div class="mb-3">
                            <label for="newWord" class="form-label">Word/Phrase to Ban:</label>
                            <input type="text" class="form-control" id="newWord" required>
                        </div>
                        <div class="mb-3">
                            <label for="newReplacements" class="form-label">Replacements (comma-separated):</label>
                            <input type="text" class="form-control" id="newReplacements" required
                                placeholder="e.g., pieces, cutlets, fillets">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveWordBtn">Add Word</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="successToast" class="toast" role="alert">
            <div class="toast-header">
                <i class="bi bi-check-circle-fill text-success me-2"></i>
                <strong class="me-auto">Success</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body"></div>
        </div>
        <div id="errorToast" class="toast" role="alert">
            <div class="toast-header">
                <i class="bi bi-exclamation-triangle-fill text-danger me-2"></i>
                <strong class="me-auto">Error</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadStats();
            loadBannedWords();
            loadRecentActivity();
        });

        // Load statistics
        async function loadStats() {
            try {
                const response = await fetch('/midjourney/api/filter-stats');
                const data = await response.json();
                
                if (data.success) {
                    const stats = data.stats;
                    document.getElementById('totalPrompts').textContent = stats.total_prompts || 0;
                    document.getElementById('filteredPrompts').textContent = stats.filtered_prompts || 0;
                    document.getElementById('blockedPrompts').textContent = stats.blocked_prompts || 0;
                    
                    const rate = stats.total_prompts > 0 ? 
                        Math.round((stats.filtered_prompts / stats.total_prompts) * 100) : 0;
                    document.getElementById('filterRate').textContent = rate + '%';
                }
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }

        // Load banned words
        async function loadBannedWords() {
            try {
                const response = await fetch('/midjourney/api/banned-words');
                const data = await response.json();
                
                if (data.success) {
                    const container = document.getElementById('bannedWordsList');
                    container.innerHTML = '';
                    
                    Object.entries(data.bannedWords).forEach(([word, replacements]) => {
                        const wordItem = document.createElement('div');
                        wordItem.className = 'banned-word-item border-bottom pb-2 mb-2';
                        wordItem.innerHTML = `
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <strong>${word}</strong>
                                    <br>
                                    <small class="text-muted">
                                        Replacements: ${Array.isArray(replacements) ? replacements.join(', ') : replacements}
                                    </small>
                                </div>
                                <button class="btn btn-sm btn-outline-danger" onclick="removeWord('${word}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        `;
                        container.appendChild(wordItem);
                    });
                    
                    if (Object.keys(data.bannedWords).length === 0) {
                        container.innerHTML = '<p class="text-muted">No banned words configured.</p>';
                    }
                }
            } catch (error) {
                console.error('Error loading banned words:', error);
            }
        }

        // Load recent activity
        async function loadRecentActivity() {
            try {
                const response = await fetch('/midjourney/api/filter-stats');
                const data = await response.json();
                
                if (data.success && data.recentFiltered) {
                    const container = document.getElementById('recentActivity');
                    container.innerHTML = '';
                    
                    data.recentFiltered.forEach(item => {
                        const activityItem = document.createElement('div');
                        activityItem.className = 'border-bottom pb-3 mb-3';
                        
                        let changes = [];
                        try {
                            changes = JSON.parse(item.filter_changes || '[]');
                        } catch (e) {
                            changes = [];
                        }
                        
                        const changesHtml = changes.map(change => 
                            `<div class="change-item">
                                <strong>${change.original}</strong> → <strong>${change.replacement}</strong>
                                <small class="text-muted">(${change.reason})</small>
                            </div>`
                        ).join('');
                        
                        activityItem.innerHTML = `
                            <div class="d-flex justify-content-between">
                                <strong>${item.recipe_idea}</strong>
                                <small class="text-muted">${new Date(item.created_at).toLocaleDateString()}</small>
                            </div>
                            <div class="mt-2">
                                ${changesHtml}
                            </div>
                        `;
                        container.appendChild(activityItem);
                    });
                    
                    if (data.recentFiltered.length === 0) {
                        container.innerHTML = '<p class="text-muted">No recent filter activity.</p>';
                    }
                }
            } catch (error) {
                console.error('Error loading recent activity:', error);
            }
        }

        // Test prompt filter
        document.getElementById('testForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const prompt = document.getElementById('testPrompt').value.trim();
            if (!prompt) {
                showToast('Please enter a prompt to test.', 'error');
                return;
            }
            
            try {
                const response = await fetch('/midjourney/api/test-prompt-filter', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    displayTestResults(data.result);
                } else {
                    showToast('Test failed: ' + data.message, 'error');
                }
            } catch (error) {
                showToast('Error testing prompt: ' + error.message, 'error');
            }
        });

        // Display test results
        function displayTestResults(result) {
            const container = document.getElementById('testOutput');
            const resultsDiv = document.getElementById('testResults');
            
            let html = '';
            
            if (result.success) {
                html += '<div class="alert alert-success">✅ Prompt passed filtering</div>';
                
                if (result.changes && result.changes.length > 0) {
                    html += '<div class="alert alert-info">';
                    html += '<strong>Changes made:</strong><br>';
                    result.changes.forEach(change => {
                        html += `<div class="change-item">
                            <strong>${change.original}</strong> → <strong>${change.replacement}</strong>
                            <small class="text-muted">(${change.reason})</small>
                        </div>`;
                    });
                    html += '</div>';
                }
                
                html += `<div class="mt-3">
                    <strong>Filtered Prompt:</strong><br>
                    <div class="bg-light p-2 rounded">${result.filteredPrompt}</div>
                </div>`;
            } else {
                html += `<div class="alert alert-danger">❌ Prompt blocked: ${result.error}</div>`;
            }
            
            if (result.warnings && result.warnings.length > 0) {
                html += '<div class="alert alert-warning">';
                html += '<strong>Warnings:</strong><br>';
                result.warnings.forEach(warning => {
                    html += `<div>⚠️ ${warning}</div>`;
                });
                html += '</div>';
            }
            
            container.innerHTML = html;
            resultsDiv.style.display = 'block';
        }

        // Add new banned word
        document.getElementById('saveWordBtn').addEventListener('click', async function() {
            const word = document.getElementById('newWord').value.trim();
            const replacements = document.getElementById('newReplacements').value.trim().split(',').map(r => r.trim());
            
            if (!word || !replacements.length) {
                showToast('Please enter both word and replacements.', 'error');
                return;
            }
            
            try {
                const response = await fetch('/midjourney/api/banned-words', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ word, replacements })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Word added successfully!', 'success');
                    document.getElementById('addWordForm').reset();
                    bootstrap.Modal.getInstance(document.getElementById('addWordModal')).hide();
                    loadBannedWords();
                } else {
                    showToast('Failed to add word: ' + data.message, 'error');
                }
            } catch (error) {
                showToast('Error adding word: ' + error.message, 'error');
            }
        });

        // Remove banned word
        async function removeWord(word) {
            if (!confirm(`Are you sure you want to remove "${word}" from the banned words list?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/midjourney/api/banned-words/${encodeURIComponent(word)}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Word removed successfully!', 'success');
                    loadBannedWords();
                } else {
                    showToast('Failed to remove word: ' + data.message, 'error');
                }
            } catch (error) {
                showToast('Error removing word: ' + error.message, 'error');
            }
        }

        // Show toast notification
        function showToast(message, type) {
            const toastId = type === 'success' ? 'successToast' : 'errorToast';
            const toast = document.getElementById(toastId);
            toast.querySelector('.toast-body').textContent = message;
            new bootstrap.Toast(toast).show();
        }

        // Test batch prompts
        document.getElementById('testBatchBtn').addEventListener('click', function() {
            const testPrompts = [
                'Professional food photography of chicken breasts with herbs',
                'Delicious turkey thighs with vegetables on a plate',
                'Naked cake with cream topping, beautiful presentation',
                'Moist chocolate cake with wet frosting',
                'Grilled chicken wings with barbecue sauce'
            ];
            
            document.getElementById('testPrompt').value = testPrompts.join('\n');
            showToast('Sample prompts loaded for testing', 'success');
        });
    </script>
</body>
</html>