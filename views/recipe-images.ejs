<!-- views/recipe-images.ejs -->
<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Recipe Images</h1>
    <div class="action-buttons">
      <a href="/midjourney/export/csv" class="btn btn-primary">
        <i class="bi bi-download"></i> Export to CSV
      </a>
    </div>
  </div>
  
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="mb-0">Filter Images</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6 mb-3">
          <label for="searchInput" class="form-label">Search by Recipe Title</label>
          <input type="text" id="searchInput" placeholder="Enter recipe title..." class="form-control">
        </div>
        <div class="col-md-3 mb-3">
          <label for="statusFilter" class="form-label">Filter by Status</label>
          <select id="statusFilter" class="form-select">
            <option value="">All Statuses</option>
            <option value="completed">Completed</option>
            <option value="generating">Generating</option>
            <option value="failed">Failed</option>
          </select>
        </div>
        <div class="col-md-3 mb-3">
          <label for="sortOrder" class="form-label">Sort By</label>
          <select id="sortOrder" class="form-select">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
          </select>
        </div>
      </div>
    </div>
  </div>
  
  <div class="loading-indicator" id="loadingImages">
    <div class="d-flex justify-content-center">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
    <p class="text-center mt-2">Loading images...</p>
  </div>
  
  <div class="image-gallery row" id="imageGallery">
    <!-- Images will be populated here by JavaScript -->
  </div>
  
  <div id="noImagesMessage" style="display: none;" class="alert alert-info mt-4">
    <p class="mb-0">No recipe images found. Generate images from recipe creation to see them here.</p>
  </div>
</div>

<!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imageModalLabel">Recipe Image</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <img id="modalImage" src="" alt="Recipe Image" class="img-fluid mb-3">
        <h4 id="modalRecipeTitle" class="mb-2"></h4>
        <p id="modalPrompt" class="text-muted small"></p>
      </div>
      <div class="modal-footer">
        <a id="modalRecipeLink" href="#" class="btn btn-outline-primary">View Recipe</a>
        <a id="modalDownloadLink" href="#" class="btn btn-outline-success" download>Download Image</a>
        <button type="button" class="btn btn-outline-danger" id="modalDeleteButton">Delete Image</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmModalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this image? This action cannot be undone.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const loadingElement = document.getElementById('loadingImages');
    const galleryElement = document.getElementById('imageGallery');
    const noImagesMessage = document.getElementById('noImagesMessage');
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    const sortOrder = document.getElementById('sortOrder');
    
    // Modal elements
    const imageModal = new bootstrap.Modal(document.getElementById('imageModal'));
    const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
    const modalImage = document.getElementById('modalImage');
    const modalRecipeTitle = document.getElementById('modalRecipeTitle');
    const modalPrompt = document.getElementById('modalPrompt');
    const modalRecipeLink = document.getElementById('modalRecipeLink');
    const modalDownloadLink = document.getElementById('modalDownloadLink');
    const modalDeleteButton = document.getElementById('modalDeleteButton');
    const confirmDeleteButton = document.getElementById('confirmDeleteButton');
    
    let currentImageId = null;
    let allImages = [];
    
    // Load recipe images when page loads
    loadRecipeImages();
    
    // Set up event listeners for filtering
    searchInput.addEventListener('input', filterImages);
    statusFilter.addEventListener('change', filterImages);
    sortOrder.addEventListener('change', sortImages);
    
    // Set up delete confirmation
    modalDeleteButton.addEventListener('click', function() {
      confirmModal.show();
    });
    
    confirmDeleteButton.addEventListener('click', function() {
      if (currentImageId) {
        deleteImage(currentImageId);
      }
    });
    
    // Load all recipe images from the server
    async function loadRecipeImages() {
      try {
        loadingElement.style.display = 'block';
        galleryElement.innerHTML = '';
        noImagesMessage.style.display = 'none';
        
        const response = await fetch('/midjourney/api/images');
        const data = await response.json();
        
        loadingElement.style.display = 'none';
        
        if (data.success && data.images) {
          allImages = data.images;
          
          if (data.images.length === 0) {
            noImagesMessage.style.display = 'block';
            return;
          }
          
          renderImages(allImages);
        } else {
          throw new Error(data.error || 'Failed to load images');
        }
      } catch (error) {
        console.error('Error loading images:', error);
        loadingElement.style.display = 'none';
        galleryElement.innerHTML = `
          <div class="col-12">
            <div class="alert alert-danger">
              Error loading images: ${error.message}
            </div>
          </div>
        `;
      }
    }
    
    // Render images to the gallery
    function renderImages(images) {
      galleryElement.innerHTML = '';
      
      if (images.length === 0) {
        noImagesMessage.style.display = 'block';
        return;
      }
      
      noImagesMessage.style.display = 'none';
      
      images.forEach(image => {
        const col = document.createElement('div');
        col.className = 'col-md-4 col-lg-3 mb-4';
        col.dataset.imageId = image.id;
        
        const statusClass = getStatusClass(image.status);
        const hasImage = image.image_path && image.image_path.length > 0;
        
        col.innerHTML = `
          <div class="card h-100">
            <div class="card-img-container position-relative">
              ${hasImage ? 
                `<img src="/midjourney/image/${image.image_path}" class="card-img-top recipe-image" alt="${image.recipe_title || 'Recipe Image'}" loading="lazy">` : 
                `<div class="no-image d-flex justify-content-center align-items-center">
                  ${image.status === 'generating' ? 
                    '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>' :
                    '<i class="bi bi-image text-muted" style="font-size: 3rem;"></i>'}
                </div>`
              }
              <span class="image-status badge ${statusClass}">${formatStatus(image.status)}</span>
            </div>
            <div class="card-body d-flex flex-column">
              <h5 class="card-title">${image.recipe_title || 'Untitled Recipe'}</h5>
              <p class="card-text text-muted small mb-3">${formatDate(image.created_at)}</p>
              <div class="mt-auto">
                <button class="btn btn-sm btn-primary view-image-btn" data-image-id="${image.id}">View Details</button>
                <a href="/recipe/${image.recipe_id}" class="btn btn-sm btn-outline-secondary">View Recipe</a>
              </div>
            </div>
          </div>
        `;
        
        galleryElement.appendChild(col);
      });
      
      // Add event listeners to view buttons
      document.querySelectorAll('.view-image-btn').forEach(button => {
        button.addEventListener('click', function() {
          const imageId = this.getAttribute('data-image-id');
          openImageModal(imageId);
        });
      });
    }
    
    // Open image modal with details
    function openImageModal(imageId) {
      const image = allImages.find(img => img.id == imageId);
      if (!image) return;
      
      currentImageId = imageId;
      
      // Set modal content
      modalRecipeTitle.textContent = image.recipe_title || 'Untitled Recipe';
      modalPrompt.textContent = image.prompt || '';
      modalRecipeLink.href = `/recipe/${image.recipe_id}`;
      
      // Set image if available
      if (image.image_path) {
        modalImage.src = `/midjourney/image/${image.image_path}`;
        modalImage.style.display = 'block';
        modalDownloadLink.href = `/midjourney/image/${image.image_path}`;
        modalDownloadLink.download = image.image_path;
        modalDownloadLink.style.display = 'block';
      } else {
        modalImage.style.display = 'none';
        modalDownloadLink.style.display = 'none';
      }
      
      // Show the modal
      imageModal.show();
    }
    
    // Delete an image
    async function deleteImage(imageId) {
      try {
        const response = await fetch(`/midjourney/api/images/${imageId}`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Close modals
          confirmModal.hide();
          imageModal.hide();
          
          // Remove from array
          allImages = allImages.filter(img => img.id != imageId);
          
          // Remove from DOM
          const imageElement = document.querySelector(`[data-image-id="${imageId}"]`);
          if (imageElement) {
            imageElement.remove();
          }
          
          // Show message if no images left
          if (allImages.length === 0) {
            noImagesMessage.style.display = 'block';
          }
          
          // Show success toast
          showToast('Image deleted successfully', 'success');
        } else {
          throw new Error(result.error || 'Failed to delete image');
        }
      } catch (error) {
        console.error('Error deleting image:', error);
        confirmModal.hide();
        showToast(`Error deleting image: ${error.message}`, 'danger');
      }
    }
    
    // Filter images based on search input and status filter
    function filterImages() {
      const searchText = searchInput.value.toLowerCase();
      const statusValue = statusFilter.value;
      
      const filteredImages = allImages.filter(image => {
        const recipeTitle = (image.recipe_title || '').toLowerCase();
        const matchesSearch = !searchText || recipeTitle.includes(searchText);
        const matchesStatus = !statusValue || image.status === statusValue;
        
        return matchesSearch && matchesStatus;
      });
      
      sortAndRenderImages(filteredImages);
    }
    
    // Sort images based on selected sort order
    function sortImages() {
      sortAndRenderImages(
        allImages.filter(image => {
          const searchText = searchInput.value.toLowerCase();
          const statusValue = statusFilter.value;
          
          const recipeTitle = (image.recipe_title || '').toLowerCase();
          const matchesSearch = !searchText || recipeTitle.includes(searchText);
          const matchesStatus = !statusValue || image.status === statusValue;
          
          return matchesSearch && matchesStatus;
        })
      );
    }
    
    // Sort and render filtered images
    function sortAndRenderImages(images) {
      const sortValue = sortOrder.value;
      
      const sortedImages = [...images].sort((a, b) => {
        if (sortValue === 'newest') {
          return new Date(b.created_at) - new Date(a.created_at);
        } else {
          return new Date(a.created_at) - new Date(b.created_at);
        }
      });
      
      renderImages(sortedImages);
    }
    
    // Helper function to get status class
    function getStatusClass(status) {
      switch (status) {
        case 'completed': return 'bg-success';
        case 'generating': return 'bg-primary';
        case 'failed': return 'bg-danger';
        default: return 'bg-secondary';
      }
    }
    
    // Helper function to format status text
    function formatStatus(status) {
      switch (status) {
        case 'completed': return 'Completed';
        case 'generating': return 'Generating';
        case 'failed': return 'Failed';
        default: return status.charAt(0).toUpperCase() + status.slice(1);
      }
    }
    
    // Helper function to format date
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    // Show toast message
    function showToast(message, type = 'info') {
      const toastContainer = document.querySelector('.toast-container');
      
      // Create container if it doesn't exist
      if (!toastContainer) {
        const container = document.createElement('div');
        container.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        document.body.appendChild(container);
      }
      
      // Create toast element
      const toastElement = document.createElement('div');
      toastElement.className = `toast align-items-center text-white bg-${type} border-0`;
      toastElement.setAttribute('role', 'alert');
      toastElement.setAttribute('aria-live', 'assertive');
      toastElement.setAttribute('aria-atomic', 'true');
      
      toastElement.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      document.querySelector('.toast-container').appendChild(toastElement);
      
      // Initialize and show toast
      const toast = new bootstrap.Toast(toastElement, {
        autohide: true,
        delay: 5000
      });
      
      toast.show();
      
      // Remove toast after it's hidden
      toastElement.addEventListener('hidden.bs.toast', function() {
        this.remove();
      });
    }
  });
</script>

<style>
  .card-img-container {
    height: 180px;
    overflow: hidden;
    position: relative;
  }
  
  .card-img-top {
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .card:hover .card-img-top {
    transform: scale(1.05);
  }
  
  .no-image {
    height: 100%;
    background-color: #f8f9fa;
    color: #adb5bd;
  }
  
  .image-status {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 10;
  }
  
  .loading-indicator {
    padding: 50px 0;
  }
  
  #modalPrompt {
    max-height: 80px;
    overflow-y: auto;
    font-style: italic;
  }
  
  /* Status colors */
  .status-generating {
    border-left: 4px solid #0d6efd;
  }
  
  .status-completed {
    border-left: 4px solid #198754;
  }
  
  .status-failed {
    border-left: 4px solid #dc3545;
  }
</style>